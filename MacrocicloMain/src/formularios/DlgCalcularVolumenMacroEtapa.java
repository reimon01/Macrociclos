/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import entidades.Macrociclo;
import entidades.MedioFisico;
import interfaces.IPersistenciaFachada;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import negocio.PersistenciaFachada;

/**
 *
 * @author x11_r
 */
public class DlgCalcularVolumenMacroEtapa extends javax.swing.JFrame {

    IPersistenciaFachada persistencia;
    Macrociclo macrociclo;

    /**
     * Creates new form DlgCalcularVolumenMacroEtapa
     */
    public DlgCalcularVolumenMacroEtapa() {
        initComponents();
    }

    public DlgCalcularVolumenMacroEtapa(Macrociclo macrociclo) {
        persistencia = PersistenciaFachada.getInstance();
        initComponents();
        this.macrociclo = macrociclo;
        setLocationRelativeTo(null);
        setVisible(true);

    }
// Este método se llama cuando se desea actualizar los valores en los medios físicos del Macrociclo.

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaCompetitiva = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablaGeneral = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        TablaEspecial = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        TablaTotal = new javax.swing.JTable();
        BtnCalcular = new javax.swing.JButton();
        BtnGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Medios");

        jLabel2.setText("Etapa General");

        jLabel3.setText("Etapa Especial");

        jLabel4.setText("Etapa Competitiva");

        jLabel5.setText("Macro");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"RAG (KM)"},
                {"RAE (MIN)"},
                {"VEL.GENERAL(MTROS)"},
                {"VEL. ESPECIAL(SEG)"},
                {"RES. VEL.GEN(MTROS)"},
                {"RES.VEL.ESP(MIN)"},
                {"FUERZA. GEN(REP)"},
                {"FUERZA.ESP(REP)"},
                {"COORDINACION tecnica(REP)"},
                {"FLEXIBILIDAD(MIN)"}
            },
            new String [] {
                "Nombre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        TablaCompetitiva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Min", "Max", "Prom.", "Ins.", "Semanas", "V.etapa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TablaCompetitiva);

        TablaGeneral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Min", "Max", "Prom.", "Ins.", "Semanas", "V.etapa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TablaGeneral);

        TablaEspecial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Min", "Max", "Prom.", "Ins.", "Semanas", "V.etapa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(TablaEspecial);

        TablaTotal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "VOLUMEN TOTAL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(TablaTotal);

        BtnCalcular.setText("Calcular");
        BtnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCalcularActionPerformed(evt);
            }
        });

        BtnGuardar.setText("Guardar");
        BtnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1)
                        .addGap(162, 162, 162)
                        .addComponent(jLabel2)
                        .addGap(265, 265, 265)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(BtnCalcular)
                                .addGap(37, 37, 37)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(BtnGuardar)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(85, 85, 85))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(BtnCalcular)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(19, 19, 19)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCalcularActionPerformed
        // TODO add your handling code here:
        // Obtén el modelo de la tabla TablaGeneral
        DefaultTableModel model = (DefaultTableModel) TablaGeneral.getModel();
        DefaultTableModel model2 = (DefaultTableModel) TablaEspecial.getModel();
        DefaultTableModel model3 = (DefaultTableModel) TablaCompetitiva.getModel();

        // Validar campos vacíos y si son números para todas las tablas, excluyendo las columnas 2, 3 y 5
        if (hayCamposVaciosYNoNumeros("Por favor, completa todos los campos con números válidos en las tablas.",
                Arrays.asList(model, model2, model3), Arrays.asList(2, 3, 5))) {
            return; // Sale del método si hay campos vacíos o no son números
        }
        try {
            for (int i = 0; i < model.getRowCount(); i++) {
                validarCelda(model, i, 0, "Por favor, ingresa un número válido en la columna 1, fila " + (i + 1));
                validarCelda(model, i, 1, "Por favor, ingresa un número válido en la columna 2, fila " + (i + 1));

                float prom1 = (Float) model.getValueAt(i, 0) + (Float) model.getValueAt(i, 1) / 2;

                // Calcula el valor "total" sumando las columnas anteriores
                // Actualiza el valor "total" en la columna correspondiente
                model.setValueAt(prom1, i, 2);

                float prom = (float) model.getValueAt(i, 2);
                float ins = (float) model.getValueAt(i, 3);
                float semanas = (float) model.getValueAt(i, 4);

                // Calcula el valor "total" sumando las columnas anteriores
                float total = prom * ins * semanas;

                // Actualiza el valor "total" en la columna correspondiente
                model.setValueAt(total, i, 5);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un número válido en las columnas correspondientes de TablaGeneral.");
            return; // Sale del método si hay un error
        }

        try {
            for (int i = 0; i < model2.getRowCount(); i++) {
                validarCelda(model2, i, 0, "Por favor, ingresa un número válido en la columna 1, fila " + (i + 1));
                validarCelda(model2, i, 1, "Por favor, ingresa un número válido en la columna 2, fila " + (i + 1));

                float prom2 = (Float) model2.getValueAt(i, 0) + (Float) model2.getValueAt(i, 1) / 2;
                model2.setValueAt(prom2, i, 2);

                float prom = (float) model2.getValueAt(i, 2);
                float ins = (float) model2.getValueAt(i, 3);
                float semanas = (float) model2.getValueAt(i, 4);

                // Calcula el valor "total" sumando las columnas anteriores
                float total = prom * ins * semanas;

                // Actualiza el valor "total" en la columna correspondiente
                model2.setValueAt(total, i, 5);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un número válido en las columnas correspondientes de TablaEspecial.");
            return; // Sale del método si hay un error
        }

        try {
            for (int i = 0; i < model3.getRowCount(); i++) {
                validarCelda(model3, i, 0, "Por favor, ingresa un número válido en la columna 1, fila " + (i + 1));
                validarCelda(model3, i, 1, "Por favor, ingresa un número válido en la columna 2, fila " + (i + 1));

                float prom3 = (Float) model3.getValueAt(i, 0) + (Float) model3.getValueAt(i, 1) / 2;

                // Calcula el valor "total" sumando las columnas anteriores
                // Actualiza el valor "total" en la columna correspondiente
                model3.setValueAt(prom3, i, 2);

                float prom = (float) model3.getValueAt(i, 2);
                float ins = (float) model3.getValueAt(i, 3);
                float semanas = (float) model3.getValueAt(i, 4);

                // Calcula el valor "total" sumando las columnas anteriores
                float total = prom * ins * semanas;

                // Actualiza el valor "total" en la columna correspondiente
                model3.setValueAt(total, i, 5);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un número válido en las columnas correspondientes de TablaCompetitiva.");
            return; // Sale del método si hay un error
        }

        // Obtén el modelo de la tabla TablaTotal
        DefaultTableModel model4 = (DefaultTableModel) TablaTotal.getModel();

        for (int i = 0; i < model4.getRowCount(); i++) {
            float total4 = (float) model3.getValueAt(i, 5) + (float) model.getValueAt(i, 5) + (float) model2.getValueAt(i, 5);

            TablaTotal.setValueAt(total4, i, 0);
            MedioFisico medioFisico = macrociclo.getMediosFisicos().get(i);
            medioFisico.setVolumenTotal(total4);
        }

    }//GEN-LAST:event_BtnCalcularActionPerformed

    private void BtnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGuardarActionPerformed
        // TODO add your handling code here:
        persistencia.registrarMacrociclo(macrociclo);

    }//GEN-LAST:event_BtnGuardarActionPerformed
    private void validarCelda(DefaultTableModel model, int fila, int columna, String mensajeError) {
        // Validación para la columna especificada
        if (model.getValueAt(fila, columna) == null || model.getValueAt(fila, columna).toString().isEmpty()) {
            JOptionPane.showMessageDialog(this, mensajeError);
            throw new NumberFormatException(); // Lanza la excepción si hay un error
        }
    }

    private boolean hayCamposVaciosYNoNumeros(String mensajeError, List<DefaultTableModel> modelos, List<Integer> columnasExcluidas) {
        // Verifica si hay algún campo vacío o no es número en las tablas
        for (DefaultTableModel model : modelos) {
            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    if (!columnasExcluidas.contains(j)) {
                        Object valor = model.getValueAt(i, j);
                        if (valor == null || !esNumero(valor.toString())) {
                            JOptionPane.showMessageDialog(this, mensajeError);
                            return true; // Hay campos vacíos o no es número, retorna true
                        }
                    }
                }
            }
        }
        return false; // No hay campos vacíos o no es número, retorna false
    }

    private boolean esNumero(String cadena) {
        try {
            Double.parseDouble(cadena);
            return true; // Si puede convertirse a número, retorna true
        } catch (NumberFormatException e) {
            return false; // Si no puede convertirse a número, retorna false
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCalcular;
    private javax.swing.JButton BtnGuardar;
    private javax.swing.JTable TablaCompetitiva;
    private javax.swing.JTable TablaEspecial;
    private javax.swing.JTable TablaGeneral;
    private javax.swing.JTable TablaTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
